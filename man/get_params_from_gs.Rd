% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/params.R
\name{get_params_from_gs}
\alias{get_params_from_gs}
\title{Download survey parameters from Google Spreadsheet}
\usage{
get_params_from_gs(
  sheet,
  ss = getOption("shinySurvey.ss"),
  dir = getOption("shinySurvey.dir"),
  ...
)
}
\arguments{
\item{sheet}{Sheet to read, as in "worksheet" or "tab". Either a string (the
name of a sheet), or an integer (the position of the sheet). Ignored if the
sheet is specified via \code{range}. If neither argument specifies the sheet,
defaults to the first visible sheet.}

\item{ss}{Something that identifies a Google Sheet: its file ID, a URL from
which we can recover the ID, or a \code{\link[googledrive:dribble]{dribble}}, which
is how googledrive represents Drive files. Processed through
\code{\link[googlesheets4:as_sheets_id]{as_sheets_id()}}.}

\item{dir}{\verb{[character(1)]}
giving the directory to store serialised \code{sheet}.
Should be under version control.}

\item{...}{
  Arguments passed on to \code{\link[googlesheets4:read_sheet]{googlesheets4::read_sheet}}
  \describe{
    \item{\code{range}}{A cell range to read from. If \code{NULL}, all non-empty cells are
read. Otherwise specify \code{range} as described in \href{https://developers.google.com/sheets/api/guides/concepts#a1_notation}{Sheets A1 notation}
or using the helpers documented in \link[googlesheets4]{cell-specification}. Sheets uses
fairly standard spreadsheet range notation, although a bit different from
Excel. Examples of valid ranges: \code{"Sheet1!A1:B2"}, \code{"Sheet1!A:A"},
\code{"Sheet1!1:2"}, \code{"Sheet1!A5:A"}, \code{"A1:B2"}, \code{"Sheet1"}. Interpreted
strictly, even if the range forces the inclusion of leading, trailing, or
embedded empty rows or columns. Takes precedence over \code{skip}, \code{n_max} and
\code{sheet}. Note \code{range} can be a named range, like \code{"sales_data"}, without
any cell reference.}
    \item{\code{col_names}}{\code{TRUE} to use the first row as column names, \code{FALSE} to get
default names, or a character vector to provide column names directly. If
user provides \code{col_types}, \code{col_names} can have one entry per column or one
entry per unskipped column.}
    \item{\code{col_types}}{Column types. Either \code{NULL} to guess all from the
spreadsheet or a string of readr-style shortcodes, with one character or
code per column. If exactly one \code{col_type} is specified, it is recycled.
See Details for more.}
    \item{\code{na}}{Character vector of strings to interpret as missing values. By
default, blank cells are treated as missing data.}
    \item{\code{trim_ws}}{Logical. Should leading and trailing whitespace be trimmed
from cell contents?}
    \item{\code{skip}}{Minimum number of rows to skip before reading anything, be it
column names or data. Leading empty rows are automatically skipped, so this
is a lower bound. Ignored if \code{range} is given.}
    \item{\code{n_max}}{Maximum number of data rows to parse into the returned tibble.
Trailing empty rows are automatically skipped, so this is an upper bound on
the number of rows in the result. Ignored if \code{range} is given. \code{n_max} is
imposed locally, after reading all non-empty cells, so, if speed is an
issue, it is better to use \code{range}.}
    \item{\code{guess_max}}{Maximum number of data rows to use for guessing column
types.}
    \item{\code{.name_repair}}{Handling of column names. By default, googlesheets4
ensures column names are not empty and are unique. There is full support
for \code{.name_repair} as documented in \code{\link[tibble:tibble]{tibble::tibble()}}.}
  }}
}
\value{
A \link[tibble:tibble-package]{tibble}
}
\description{
When \code{\link[googlesheets4:sheets_has_token]{googlesheets4::sheets_has_token()}}, returns updated \code{ss} from \code{sheet}, otherwise local copy from last run.
See \code{\link[googlesheets4:read_sheet]{googlesheets4::read_sheet()}} for details.
}
\details{
On the one hand, it is best to keep all survey application parameters (such as response options) under source control management (SCM).
On the other hand, some study collaborators may want to frequently and easily change parameters, and be unable or unwilling to use SCM.

This function allows such "non-tech" collaborators to edit survey parameters in a Google Spreadsheet online, while regularly commiting their contributions to the source.

To use this function:
\enumerate{
\item Set up a Google Spreadsheet; authorise collaborators and optionally add write protections and notifications for the developer where appropriate.
\item Let collaborators edit the Google Spreadsheet.
\item Whenever an edit has been made, the developing collaborator can pull updates from Google Spreadsheets using this function from her local development machine (or wherever (\code{\link[googlesheets4:sheets_has_token]{googlesheets4::sheets_has_token()}}) and commit the result as a deparsed tibble.
}

Ensure that changing entry parameters will not compromise data collection, the database schema or analysis.
}
